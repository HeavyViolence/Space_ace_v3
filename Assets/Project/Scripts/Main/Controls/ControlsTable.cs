//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Prefabs/Main/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SpaceAce.Main.Controls
{
    public partial class @ControlsTable: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ControlsTable()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Navigation"",
            ""id"": ""27911990-2f97-4f91-9aac-3002072a7453"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""ae8ea177-fffc-4681-bc17-85f05848abcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deny"",
                    ""type"": ""Button"",
                    ""id"": ""8c2754bb-8139-467f-a03a-7ab87cb599d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""3610d66b-4af6-468e-ad7f-a63fdb436782"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""1cc6cf05-801e-4bd2-a05c-79e2695a4263"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""39ddc904-10bd-4914-85c0-ff792f2806e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""708adc72-8aff-4dfa-aee2-88a890a8d57c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sell"",
                    ""type"": ""Button"",
                    ""id"": ""00567ec9-8a40-481d-bac1-fb0e55b69474"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""a5825bc7-5b9a-410a-9e01-86905c41b1d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CommandConsole"",
                    ""type"": ""Button"",
                    ""id"": ""898062ca-e1e0-404f-947b-f499518943fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e36b63c-c62c-472a-9ecf-357e7e72bb9a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""526727ec-6005-4343-9f6c-b37fc1a54d50"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ba3333-d48f-4a04-8e1b-c5d10be84584"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Deny"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b867448-1bec-4475-87f0-ec5b84fc5dbb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Deny"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42b60c4f-d03a-44ab-9848-7c9cb95416c0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65071f27-aeff-47af-b7bc-e7c3de8a6d9e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81603370-c540-4667-a1cd-ae70d414a87e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58115baa-7e2a-48fa-b5d9-ebb25b2f4c06"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5355cf8-aa08-488f-a215-3ee34e02a15c"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""CommandConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79ba1638-4144-49f7-b59f-0d4dd5e5b1fb"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CommandConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e071907-4e8e-4fb7-a6cd-1411b7b01ce4"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b4d1b35-c340-46e4-b6ec-864280454eda"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09af079b-a9c1-4b8d-8679-86b51c260cba"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf7627a-62c2-4970-a5ff-d6b51c04674f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""455b8191-fdd3-4afb-a0f6-d804d4fbd23c"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Sell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9955b0f7-0d52-4c91-abf7-a1516ae6e225"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8045bb3-bf15-4d7c-9770-dde8b99a5b92"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c80f1436-4ffc-452d-b7e9-d1318bcb8c8c"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""f111c17c-4ded-41c0-bc55-46602cb69ad7"",
            ""actions"": [
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""ffe6ae0c-be29-4f3b-b119-a557ca2dfc2f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""49555332-7cfa-400b-bda4-bbbe2bb6aa5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""7105d88e-9e49-471a-9cf7-8ec36d341c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextAmmo"",
                    ""type"": ""Button"",
                    ""id"": ""d61ff7d8-b1b5-454e-afdd-9633249e44c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousAmmo"",
                    ""type"": ""Button"",
                    ""id"": ""44016e56-8e89-403a-9c06-0d31afdcfaf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAbility"",
                    ""type"": ""Button"",
                    ""id"": ""a6d98e9b-3864-4039-addd-8ab321586808"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""a0ef0a36-02d0-43d6-88fa-95b714d5d1f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6236001-a141-473c-af4b-3c54030b8f6a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""555bf2fe-4756-4837-b02f-a0765f1b5ba7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""943111fc-a014-4bda-b2b9-687ee34b640d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc7926a9-5d2a-4f04-b951-c786475d9feb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""f7713350-b112-482b-82bb-3deb45e73e0f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5e7ccea6-eeb8-419f-8821-d02874cb57a0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""681cb061-3493-45ac-b0b2-e694d95859a6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""feb31cac-5846-4031-af69-0a369aa315d4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""369daf20-ab36-4b61-a649-3cd0f247c231"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8ca7fcbc-9d1b-4fc0-8f1b-b2ce38cab664"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2917aae0-72cc-417e-838f-2a0baef67918"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbca6079-ea2c-4bda-9357-22ee7f9060e2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d66ea1bf-8b35-4edf-a256-98521ea1ee5a"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""NextAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44fc7e78-fda1-40ee-8e91-7840926ebe65"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NextAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8b7a106-c520-4c26-baac-82c8e239aeb8"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""PreviousAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f53c290c-0bb0-4bfc-b009-eb4fa6e68d76"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PreviousAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb793aa3-f55b-426d-a077-5036c92137d6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58e071dd-23ef-4a57-b546-73ec0d3aa6dc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04202f28-8167-4e3c-a30f-fc9bc3c42b8e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""SpecialAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36179e3e-8a05-4075-93a4-3a337d79a507"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpecialAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Navigation
            m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
            m_Navigation_Confirm = m_Navigation.FindAction("Confirm", throwIfNotFound: true);
            m_Navigation_Deny = m_Navigation.FindAction("Deny", throwIfNotFound: true);
            m_Navigation_Forward = m_Navigation.FindAction("Forward", throwIfNotFound: true);
            m_Navigation_Back = m_Navigation.FindAction("Back", throwIfNotFound: true);
            m_Navigation_Inventory = m_Navigation.FindAction("Inventory", throwIfNotFound: true);
            m_Navigation_Use = m_Navigation.FindAction("Use", throwIfNotFound: true);
            m_Navigation_Sell = m_Navigation.FindAction("Sell", throwIfNotFound: true);
            m_Navigation_Settings = m_Navigation.FindAction("Settings", throwIfNotFound: true);
            m_Navigation_CommandConsole = m_Navigation.FindAction("CommandConsole", throwIfNotFound: true);
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Velocity = m_Gameplay.FindAction("Velocity", throwIfNotFound: true);
            m_Gameplay_Pointer = m_Gameplay.FindAction("Pointer", throwIfNotFound: true);
            m_Gameplay_Fire = m_Gameplay.FindAction("Fire", throwIfNotFound: true);
            m_Gameplay_NextAmmo = m_Gameplay.FindAction("NextAmmo", throwIfNotFound: true);
            m_Gameplay_PreviousAmmo = m_Gameplay.FindAction("PreviousAmmo", throwIfNotFound: true);
            m_Gameplay_SpecialAbility = m_Gameplay.FindAction("SpecialAbility", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Navigation
        private readonly InputActionMap m_Navigation;
        private List<INavigationActions> m_NavigationActionsCallbackInterfaces = new List<INavigationActions>();
        private readonly InputAction m_Navigation_Confirm;
        private readonly InputAction m_Navigation_Deny;
        private readonly InputAction m_Navigation_Forward;
        private readonly InputAction m_Navigation_Back;
        private readonly InputAction m_Navigation_Inventory;
        private readonly InputAction m_Navigation_Use;
        private readonly InputAction m_Navigation_Sell;
        private readonly InputAction m_Navigation_Settings;
        private readonly InputAction m_Navigation_CommandConsole;
        public struct NavigationActions
        {
            private @ControlsTable m_Wrapper;
            public NavigationActions(@ControlsTable wrapper) { m_Wrapper = wrapper; }
            public InputAction @Confirm => m_Wrapper.m_Navigation_Confirm;
            public InputAction @Deny => m_Wrapper.m_Navigation_Deny;
            public InputAction @Forward => m_Wrapper.m_Navigation_Forward;
            public InputAction @Back => m_Wrapper.m_Navigation_Back;
            public InputAction @Inventory => m_Wrapper.m_Navigation_Inventory;
            public InputAction @Use => m_Wrapper.m_Navigation_Use;
            public InputAction @Sell => m_Wrapper.m_Navigation_Sell;
            public InputAction @Settings => m_Wrapper.m_Navigation_Settings;
            public InputAction @CommandConsole => m_Wrapper.m_Navigation_CommandConsole;
            public InputActionMap Get() { return m_Wrapper.m_Navigation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
            public void AddCallbacks(INavigationActions instance)
            {
                if (instance == null || m_Wrapper.m_NavigationActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NavigationActionsCallbackInterfaces.Add(instance);
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Deny.started += instance.OnDeny;
                @Deny.performed += instance.OnDeny;
                @Deny.canceled += instance.OnDeny;
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
                @Sell.started += instance.OnSell;
                @Sell.performed += instance.OnSell;
                @Sell.canceled += instance.OnSell;
                @Settings.started += instance.OnSettings;
                @Settings.performed += instance.OnSettings;
                @Settings.canceled += instance.OnSettings;
                @CommandConsole.started += instance.OnCommandConsole;
                @CommandConsole.performed += instance.OnCommandConsole;
                @CommandConsole.canceled += instance.OnCommandConsole;
            }

            private void UnregisterCallbacks(INavigationActions instance)
            {
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
                @Deny.started -= instance.OnDeny;
                @Deny.performed -= instance.OnDeny;
                @Deny.canceled -= instance.OnDeny;
                @Forward.started -= instance.OnForward;
                @Forward.performed -= instance.OnForward;
                @Forward.canceled -= instance.OnForward;
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
                @Inventory.started -= instance.OnInventory;
                @Inventory.performed -= instance.OnInventory;
                @Inventory.canceled -= instance.OnInventory;
                @Use.started -= instance.OnUse;
                @Use.performed -= instance.OnUse;
                @Use.canceled -= instance.OnUse;
                @Sell.started -= instance.OnSell;
                @Sell.performed -= instance.OnSell;
                @Sell.canceled -= instance.OnSell;
                @Settings.started -= instance.OnSettings;
                @Settings.performed -= instance.OnSettings;
                @Settings.canceled -= instance.OnSettings;
                @CommandConsole.started -= instance.OnCommandConsole;
                @CommandConsole.performed -= instance.OnCommandConsole;
                @CommandConsole.canceled -= instance.OnCommandConsole;
            }

            public void RemoveCallbacks(INavigationActions instance)
            {
                if (m_Wrapper.m_NavigationActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INavigationActions instance)
            {
                foreach (var item in m_Wrapper.m_NavigationActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NavigationActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NavigationActions @Navigation => new NavigationActions(this);

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_Velocity;
        private readonly InputAction m_Gameplay_Pointer;
        private readonly InputAction m_Gameplay_Fire;
        private readonly InputAction m_Gameplay_NextAmmo;
        private readonly InputAction m_Gameplay_PreviousAmmo;
        private readonly InputAction m_Gameplay_SpecialAbility;
        public struct GameplayActions
        {
            private @ControlsTable m_Wrapper;
            public GameplayActions(@ControlsTable wrapper) { m_Wrapper = wrapper; }
            public InputAction @Velocity => m_Wrapper.m_Gameplay_Velocity;
            public InputAction @Pointer => m_Wrapper.m_Gameplay_Pointer;
            public InputAction @Fire => m_Wrapper.m_Gameplay_Fire;
            public InputAction @NextAmmo => m_Wrapper.m_Gameplay_NextAmmo;
            public InputAction @PreviousAmmo => m_Wrapper.m_Gameplay_PreviousAmmo;
            public InputAction @SpecialAbility => m_Wrapper.m_Gameplay_SpecialAbility;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @Velocity.started += instance.OnVelocity;
                @Velocity.performed += instance.OnVelocity;
                @Velocity.canceled += instance.OnVelocity;
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @NextAmmo.started += instance.OnNextAmmo;
                @NextAmmo.performed += instance.OnNextAmmo;
                @NextAmmo.canceled += instance.OnNextAmmo;
                @PreviousAmmo.started += instance.OnPreviousAmmo;
                @PreviousAmmo.performed += instance.OnPreviousAmmo;
                @PreviousAmmo.canceled += instance.OnPreviousAmmo;
                @SpecialAbility.started += instance.OnSpecialAbility;
                @SpecialAbility.performed += instance.OnSpecialAbility;
                @SpecialAbility.canceled += instance.OnSpecialAbility;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @Velocity.started -= instance.OnVelocity;
                @Velocity.performed -= instance.OnVelocity;
                @Velocity.canceled -= instance.OnVelocity;
                @Pointer.started -= instance.OnPointer;
                @Pointer.performed -= instance.OnPointer;
                @Pointer.canceled -= instance.OnPointer;
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
                @NextAmmo.started -= instance.OnNextAmmo;
                @NextAmmo.performed -= instance.OnNextAmmo;
                @NextAmmo.canceled -= instance.OnNextAmmo;
                @PreviousAmmo.started -= instance.OnPreviousAmmo;
                @PreviousAmmo.performed -= instance.OnPreviousAmmo;
                @PreviousAmmo.canceled -= instance.OnPreviousAmmo;
                @SpecialAbility.started -= instance.OnSpecialAbility;
                @SpecialAbility.performed -= instance.OnSpecialAbility;
                @SpecialAbility.canceled -= instance.OnSpecialAbility;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_KeyboardandmouseSchemeIndex = -1;
        public InputControlScheme KeyboardandmouseScheme
        {
            get
            {
                if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
                return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface INavigationActions
        {
            void OnConfirm(InputAction.CallbackContext context);
            void OnDeny(InputAction.CallbackContext context);
            void OnForward(InputAction.CallbackContext context);
            void OnBack(InputAction.CallbackContext context);
            void OnInventory(InputAction.CallbackContext context);
            void OnUse(InputAction.CallbackContext context);
            void OnSell(InputAction.CallbackContext context);
            void OnSettings(InputAction.CallbackContext context);
            void OnCommandConsole(InputAction.CallbackContext context);
        }
        public interface IGameplayActions
        {
            void OnVelocity(InputAction.CallbackContext context);
            void OnPointer(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnNextAmmo(InputAction.CallbackContext context);
            void OnPreviousAmmo(InputAction.CallbackContext context);
            void OnSpecialAbility(InputAction.CallbackContext context);
        }
    }
}
